[{"input":{"codeWithSnippetDelimited":"# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (for/list ((p1 people)\n             (p2 (append shuffled (list (first shuffled)))))\n    (set-person-recipient! p1 (person-recipient p2)))\n  people)\n\n# Step 3: Function to send notification\n(define (send-notification person)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name person) (person-recipient person))))\n\n; Send notification to each person in the list\n(define (notify-all people)\n  (for-each send-notification people))\n\n; Step 4: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients\n  (define assigned-people (assign-recipients people))\n  \n  ; Notify each participant of their assigned recipient\n  (notify-all assigned-people))\n  \n★(secret-santa-exchange)★","updatedCodeWithoutDelimiters":"```racket\n# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Function to shuffle a list\n(define (shuffle lst)\n  (let loop ((lst lst) (res '()))\n    (if (null? lst)\n        res\n        (let* ((len (length lst))\n               (i (random len))\n               (elem (list-ref lst i))\n               (rest (remove elem lst)))\n          (loop rest (cons elem res))))))\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (map (λ (p1 p2) (cons p1 p2))\n       people\n       (append shuffled (list (first shuffled)))))\n\n# Step 3: Function to update recipient in person object\n(define (update-recipient person recipient)\n  (set-person-recipient! person (person-name recipient)))\n\n# Step 3.1: Function to set all recipients\n(define (set-all-recipients assignments)\n  (for-each (λ (pair) (update-recipient (car pair) (cdr pair))) assignments))\n\n# Step 4: Function to send notification\n(define (send-notification pair)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name (car pair)) (person-name (cdr pair)))))\n\n; Send notification to each pair in the list\n(define (notify-all pairs)\n  (for-each send-notification pairs))\n\n; Step 5: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients and update persons\n  (define pairs (assign-recipients people))\n  (set-all-recipients pairs)\n  \n  ; Notify each participant of their assigned recipient\n  (notify-all pairs))\n  \n(secret-santa-exchange)\n```","delimiter":"★"},"output":{"gptRetaggingJSON":{"1":"(secret-santa-exchange)","2":61,"3":61,"4":1},"out":"```racket\n# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Function to shuffle a list\n(define (shuffle lst)\n  (let loop ((lst lst) (res '()))\n    (if (null? lst)\n        res\n        (let* ((len (length lst))\n               (i (random len))\n               (elem (list-ref lst i))\n               (rest (remove elem lst)))\n          (loop rest (cons elem res))))))\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (map (λ (p1 p2) (cons p1 p2))\n       people\n       (append shuffled (list (first shuffled)))))\n\n# Step 3: Function to update recipient in person object\n(define (update-recipient person recipient)\n  (set-person-recipient! person (person-name recipient)))\n\n# Step 3.1: Function to set all recipients\n(define (set-all-recipients assignments)\n  (for-each (λ (pair) (update-recipient (car pair) (cdr pair))) assignments))\n\n# Step 4: Function to send notification\n(define (send-notification pair)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name (car pair)) (person-name (cdr pair)))))\n\n; Send notification to each pair in the list\n(define (notify-all pairs)\n  (for-each send-notification pairs))\n\n; Step 5: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients and update persons\n  (define pairs (assign-recipients people))\n  (set-all-recipients pairs)\n  \n  ; Notify each participant of their assigned recipient\n  (notify-all pairs))\n  \n★(secret-santa-exchange)★\n```"},"target":"```racket\n# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Function to shuffle a list\n(define (shuffle lst)\n  (let loop ((lst lst) (res '()))\n    (if (null? lst)\n        res\n        (let* ((len (length lst))\n               (i (random len))\n               (elem (list-ref lst i))\n               (rest (remove elem lst)))\n          (loop rest (cons elem res))))))\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (map (λ (p1 p2) (cons p1 p2))\n       people\n       (append shuffled (list (first shuffled)))))\n\n# Step 3: Function to update recipient in person object\n(define (update-recipient person recipient)\n  (set-person-recipient! person (person-name recipient)))\n\n# Step 3.1: Function to set all recipients\n(define (set-all-recipients assignments)\n  (for-each (λ (pair) (update-recipient (car pair) (cdr pair))) assignments))\n\n# Step 4: Function to send notification\n(define (send-notification pair)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name (car pair)) (person-name (cdr pair)))))\n\n; Send notification to each pair in the list\n(define (notify-all pairs)\n  (for-each send-notification pairs))\n\n; Step 5: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients and update persons\n  (define pairs (assign-recipients people))\n  (set-all-recipients pairs)\n  \n  ; Notify each participant of their assigned recipient\n  ★(notify-all pairs)★)\n  \n(secret-santa-exchange)\n```","other":{"language":"Racket","snippetType":"function call","updateIsPartial":false,"delimiter":"★","codeWithSnippetDelimited":"# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (for/list ((p1 people)\n             (p2 (append shuffled (list (first shuffled)))))\n    (set-person-recipient! p1 (person-recipient p2)))\n  people)\n\n# Step 3: Function to send notification\n(define (send-notification person)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name person) (person-recipient person))))\n\n; Send notification to each person in the list\n(define (notify-all people)\n  (for-each send-notification people))\n\n; Step 4: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients\n  (define assigned-people (assign-recipients people))\n  \n  ; Notify each participant of their assigned recipient\n  (notify-all assigned-people))\n  \n★(secret-santa-exchange)★","updateDescription":"One interesting change a real-world programmer might apply to this code is separating the logic for assigning gift recipients from the logic for sending notifications. Currently, the `assign-recipients` function not only assigns recipients but also updates the `person` objects with their assigned recipient. Then, the `send-notification` function relies on the `person` objects to send the notifications.\n\nA possible refactoring could be to split these two responsibilities into separate functions. The `assign-recipients` function could simply return a list of pairs, where each pair represents the giver and the recipient. This way, it only focuses on generating the assignments and does not modify the `person` objects. The `send-notification` function, on the other hand, could take the list of pairs as input and send the notifications based on that.\n\nThis separation of concerns would make the code more modular and easier to maintain. It allows for changes to the recipient assignment logic without affecting the notification logic, and vice versa. Additionally, it promotes reuse of the recipient assignment logic, as it can be used in other contexts, such as generating assignments for different gift exchanges.","updatedCodeWithSnippetDelimited":"```racket\n# Implementation of Secret Santa Matchmaking\n\n# Step 1: Define a data structure to represent a person\n(struct person (name contact recipient) #:transparent)\n\n# Function to shuffle a list\n(define (shuffle lst)\n  (let loop ((lst lst) (res '()))\n    (if (null? lst)\n        res\n        (let* ((len (length lst))\n               (i (random len))\n               (elem (list-ref lst i))\n               (rest (remove elem lst)))\n          (loop rest (cons elem res))))))\n\n# Step 2: Function to assign random gift recipients\n(define (assign-recipients people)\n  (define shuffled (shuffle people))\n  (map (λ (p1 p2) (cons p1 p2))\n       people\n       (append shuffled (list (first shuffled)))))\n\n# Step 3: Function to update recipient in person object\n(define (update-recipient person recipient)\n  (set-person-recipient! person (person-name recipient)))\n\n# Step 3.1: Function to set all recipients\n(define (set-all-recipients assignments)\n  (for-each (λ (pair) (update-recipient (car pair) (cdr pair))) assignments))\n\n# Step 4: Function to send notification\n(define (send-notification pair)\n  (displayln (format \"Sending notification to ~a: You are assigned to give a gift to ~a.\"\n                     (person-name (car pair)) (person-name (cdr pair)))))\n\n; Send notification to each pair in the list\n(define (notify-all pairs)\n  (for-each send-notification pairs))\n\n; Step 5: Main function\n(define (secret-santa-exchange)\n  ; Read the list of participants from a file or user input\n  (define participants '((\"Alice\" \"alice@example.com\")\n                         (\"Bob\" \"bob@example.com\")\n                         (\"Charlie\" \"charlie@example.com\")\n                         (\"David\" \"david@example.com\")))\n  \n  ; Convert participants into person objects\n  (define people (for/list ((p participants))\n                   (person (first p) (second p) '())))\n  \n  ; Assign gift recipients and update persons\n  (define pairs (assign-recipients people))\n  (set-all-recipients pairs)\n  \n  ; Notify each participant of their assigned recipient\n  ★(notify-all pairs)★)\n  \n(secret-santa-exchange)\n```","problemDescription":"Problem: Secret Santa Matchmaking\n\nFraming:\nYou are tasked with creating a program that facilitates the gifting process during the holiday season for a group of friends participating in a Secret Santa gift exchange. The objective is to assign each person in the group a random gift recipient while keeping the assignments a secret from everyone involved, ensuring that the person giving the gift doesn't know who their recipient is until the gift is opened.\n\nSteps to solve the problem:\n\n1. Define a data structure to represent a person participating in the Secret Santa exchange. This structure should include information such as their name, contact details, and their assigned gift recipient. For simplicity, you can represent a person as a Racket struct.\n\n2. Create a function that takes a list of people as input and assigns each person a random gift recipient from the same list. To achieve this, you can use the `shuffle` function from the `random` module to randomly order the list of people. Then, assign each person a gift recipient by pairing each person with the person in the next position of the shuffled list, except for the last person who is paired with the first person.\n\n3. Implement a function called `sendNotification` that sends an email or message to each person participating in the Secret Santa exchange, notifying them of their assigned gift recipient. This function should take a person's details (name and contact information) and their assigned recipient as input and send the message accordingly. You can use the `sendmail` function or a similar method from a Racket package to achieve this.\n\n4. Finally, create a main function that ties everything together. This function should read the list of people participating in the Secret Santa exchange from a file or via user input, call the function that assigns the gift recipients, and then call the `sendNotification` function for each person to send them their recipient's details.\n\nBy following these steps, you will be able to create a single file program in Racket that takes a list of participants, assigns them random gift recipients, and notifies each participant of their assigned recipient, facilitating a fun and secret gift exchange among friends.","snippetDescription":"A particular function call in the program is the `(secret-santa-exchange)` call at the end of the program. This call is made to the main function `secret-santa-exchange` which executes the Secret Santa Matchmaking process. It reads the list of participants, converts them into person objects, assigns gift recipients, and notifies each participant of their assigned recipient. This function call starts the entire Secret Santa exchange process.","index":83},"time":2255,"index":83},{"input":{"codeWithSnippetDelimited":"const showtimes = [\n    { showtime: \"2:00 PM\", availableSeats: 10 },\n    { showtime: \"4:00 PM\", availableSeats: 20 },\n    { showtime: \"6:00 PM\", availableSeats: 15 }\n];\n\nfunction listShowtimes() {\n    for (let showtime of showtimes) {\n        console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n    }\n}\n\nfunction reserveSeats(showtime, numSeats) {\n    for (let show of showtimes) {\n        if (show.showtime === showtime) {\n            if (show.availableSeats >= numSeats) {\n                show.availableSeats -= numSeats;\n                console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                return;\n            } else {\n                console.log(`Insufficient seats available for showtime ${showtime}`);\n                return;\n            }\n        }\n    }\n    console.log(`Invalid showtime: ${showtime}`);\n}\n\nfunction getTotalReservedSeats(showtime) {\n    for (let show of showtimes) {\n        if (show.showtime === showtime) {\n            return show.availableSeats;\n        }\n    }\n    console.log(`Invalid showtime: ${showtime}`);\n    return 0;\n}\n\nlistShowtimes();\n★reserveSeats(\"2:00 PM\", 4);★\nconsole.log(getTotalReservedSeats(\"2:00 PM\"));","updatedCodeWithoutDelimiters":"```javascript\nclass TicketReservationSystem {\n    constructor() {\n        this.showtimes = [\n            { showtime: \"2:00 PM\", availableSeats: 10 },\n            { showtime: \"4:00 PM\", availableSeats: 20 },\n            { showtime: \"6:00 PM\", availableSeats: 15 }\n        ];\n    }\n\n    listShowtimes() {\n        for (let showtime of this.showtimes) {\n            console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n        }\n    }\n\n    reserveSeats(showtime, numSeats) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                if (show.availableSeats >= numSeats) {\n                    show.availableSeats -= numSeats;\n                    console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                    return;\n                } else {\n                    console.log(`Insufficient seats available for showtime ${showtime}`);\n                    return;\n                }\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n    }\n\n    getTotalReservedSeats(showtime) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                return show.availableSeats;\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n        return 0;\n    }\n}\n\nconst reservationSystem = new TicketReservationSystem();\nreservationSystem.listShowtimes();\nreservationSystem.reserveSeats(\"2:00 PM\", 4);\nconsole.log(reservationSystem.getTotalReservedSeats(\"2:00 PM\"));\n```","delimiter":"★"},"output":{"gptRetaggingJSON":{"1":"reservationSystem.reserveSeats(\"2:00 PM\", 4);","2":46,"3":46,"4":1},"out":"```javascript\nclass TicketReservationSystem {\n    constructor() {\n        this.showtimes = [\n            { showtime: \"2:00 PM\", availableSeats: 10 },\n            { showtime: \"4:00 PM\", availableSeats: 20 },\n            { showtime: \"6:00 PM\", availableSeats: 15 }\n        ];\n    }\n\n    listShowtimes() {\n        for (let showtime of this.showtimes) {\n            console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n        }\n    }\n\n    reserveSeats(showtime, numSeats) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                if (show.availableSeats >= numSeats) {\n                    show.availableSeats -= numSeats;\n                    console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                    return;\n                } else {\n                    console.log(`Insufficient seats available for showtime ${showtime}`);\n                    return;\n                }\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n    }\n\n    getTotalReservedSeats(showtime) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                return show.availableSeats;\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n        return 0;\n    }\n}\n\nconst reservationSystem = new TicketReservationSystem();\nreservationSystem.listShowtimes();\n★reservationSystem.reserveSeats(\"2:00 PM\", 4);★\nconsole.log(reservationSystem.getTotalReservedSeats(\"2:00 PM\"));\n```"},"target":"```javascript\nclass TicketReservationSystem {\n    constructor() {\n        this.showtimes = [\n            { showtime: \"2:00 PM\", availableSeats: 10 },\n            { showtime: \"4:00 PM\", availableSeats: 20 },\n            { showtime: \"6:00 PM\", availableSeats: 15 }\n        ];\n    }\n\n    listShowtimes() {\n        for (let showtime of this.showtimes) {\n            console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n        }\n    }\n\n    ★reserveSeats(showtime, numSeats)★ {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                if (show.availableSeats >= numSeats) {\n                    show.availableSeats -= numSeats;\n                    console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                    return;\n                } else {\n                    console.log(`Insufficient seats available for showtime ${showtime}`);\n                    return;\n                }\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n    }\n\n    getTotalReservedSeats(showtime) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                return show.availableSeats;\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n        return 0;\n    }\n}\n\nconst reservationSystem = new TicketReservationSystem();\nreservationSystem.listShowtimes();\nreservationSystem.reserveSeats(\"2:00 PM\", 4);\nconsole.log(reservationSystem.getTotalReservedSeats(\"2:00 PM\"));\n```","other":{"language":"JavaScript","snippetType":"function call","updateIsPartial":false,"delimiter":"★","codeWithSnippetDelimited":"const showtimes = [\n    { showtime: \"2:00 PM\", availableSeats: 10 },\n    { showtime: \"4:00 PM\", availableSeats: 20 },\n    { showtime: \"6:00 PM\", availableSeats: 15 }\n];\n\nfunction listShowtimes() {\n    for (let showtime of showtimes) {\n        console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n    }\n}\n\nfunction reserveSeats(showtime, numSeats) {\n    for (let show of showtimes) {\n        if (show.showtime === showtime) {\n            if (show.availableSeats >= numSeats) {\n                show.availableSeats -= numSeats;\n                console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                return;\n            } else {\n                console.log(`Insufficient seats available for showtime ${showtime}`);\n                return;\n            }\n        }\n    }\n    console.log(`Invalid showtime: ${showtime}`);\n}\n\nfunction getTotalReservedSeats(showtime) {\n    for (let show of showtimes) {\n        if (show.showtime === showtime) {\n            return show.availableSeats;\n        }\n    }\n    console.log(`Invalid showtime: ${showtime}`);\n    return 0;\n}\n\nlistShowtimes();\n★reserveSeats(\"2:00 PM\", 4);★\nconsole.log(getTotalReservedSeats(\"2:00 PM\"));","updateDescription":"An interesting change that a real-world programmer might apply to this code is to encapsulate the showtimes data structure and the functions related to it into a class. This would provide a more object-oriented approach and improve code organization and readability.\n\nThe class could be named something like \"TicketReservationSystem\" and would have properties for the showtimes array. The functions listShowtimes(), reserveSeats(), and getTotalReservedSeats() could be converted into methods of this class.\n\nThe class could also include additional methods, such as a constructor to initialize the showtimes array and a method to add new showtimes to the reservation system.\n\nFurthermore, the class could implement error handling to catch and handle any invalid showtimes or reservations. This could include throwing custom exceptions or returning error messages instead of console.log statements.","updatedCodeWithSnippetDelimited":"```javascript\nclass TicketReservationSystem {\n    constructor() {\n        this.showtimes = [\n            { showtime: \"2:00 PM\", availableSeats: 10 },\n            { showtime: \"4:00 PM\", availableSeats: 20 },\n            { showtime: \"6:00 PM\", availableSeats: 15 }\n        ];\n    }\n\n    listShowtimes() {\n        for (let showtime of this.showtimes) {\n            console.log(`Showtime: ${showtime.showtime} - Available Seats: ${showtime.availableSeats}`);\n        }\n    }\n\n    ★reserveSeats(showtime, numSeats)★ {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                if (show.availableSeats >= numSeats) {\n                    show.availableSeats -= numSeats;\n                    console.log(`Successfully reserved ${numSeats} seats for showtime ${showtime}`);\n                    return;\n                } else {\n                    console.log(`Insufficient seats available for showtime ${showtime}`);\n                    return;\n                }\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n    }\n\n    getTotalReservedSeats(showtime) {\n        for (let show of this.showtimes) {\n            if (show.showtime === showtime) {\n                return show.availableSeats;\n            }\n        }\n        console.log(`Invalid showtime: ${showtime}`);\n        return 0;\n    }\n}\n\nconst reservationSystem = new TicketReservationSystem();\nreservationSystem.listShowtimes();\nreservationSystem.reserveSeats(\"2:00 PM\", 4);\nconsole.log(reservationSystem.getTotalReservedSeats(\"2:00 PM\"));\n```","problemDescription":"Problem: Ticket Reservation System\n\nYou have been tasked with building a ticket reservation system for a movie theater. The theater has a limited number of seats available for each showtime, and customers can reserve multiple seats at once.\n\nThe system should have the following functionality:\n1. List all available showtimes along with the number of seats available for each showtime.\n2. Reserve seats for a specific showtime. The system should check if the requested number of seats is available and update the number of available seats accordingly.\n3. Get the total number of reserved seats for a showtime.\n\nSteps to solve the problem:\n1. Start by declaring a data structure to store the showtimes and their respective available seats. You could use an array of objects, where each object represents a showtime and has properties for the showtime (e.g. \"2:00 PM\") and the number of available seats.\n2. Write a function to list all available showtimes. Iterate over the showtimes array and print the showtime along with the number of available seats.\n3. Write a function to reserve seats for a specific showtime. The function should take parameters for the showtime and the number of seats to reserve. Check if the requested number of seats is available for that showtime. If yes, update the number of available seats and display a success message. If the seats are not available, display an error message.\n4. Write a function to get the total number of reserved seats for a showtime. Iterate over the showtimes array, find the showtime, and return the number of available seats.\n\nBy implementing these steps, you will create a ticket reservation system that allows users to view available showtimes, reserve seats, and get the total number of reserved seats for a specific showtime.","snippetDescription":"A function call in this program is `reserveSeats(\"2:00 PM\", 4)`.","index":87},"time":7419,"index":87},{"input":{"codeWithSnippetDelimited":"(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define dietary-preferences ★'(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\")★)\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter (lambda (recipe)\n                                      (let ((recipe-ingredients (recipe-ingredients recipe)))\n                                        (andmap (lambda (preference)\n                                                  (not (member preference recipe-ingredients)))\n                                                dietary-preferences)))\n                                    available-recipes)))\n      (list-ref filtered-recipes (random (length filtered-recipes)))))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe)))\n                          (recipe-ingredients (cdr day-recipe))\n                          (recipe-cooking-instructions (cdr day-recipe)))\n                     meal-plan)))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))","updatedCodeWithoutDelimiters":"```racket\n(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define dietary-preferences '(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\"))\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (filter-recipes-by-preferences recipes preferences)\n  (filter (lambda (recipe)\n            (let ((recipe-ingredients (recipe-ingredients recipe)))\n              (andmap (lambda (preference)\n                        (not (member preference recipe-ingredients)))\n                      preferences)))\n          recipes))\n\n(define (select-random-recipe filtered-recipes)\n  (list-ref filtered-recipes (random (length filtered-recipes))))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter-recipes-by-preferences available-recipes dietary-preferences)))\n      (select-random-recipe filtered-recipes)))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe))))\n              (displayln \"Ingredients: \" (string-join (recipe-ingredients (cdr day-recipe)) \", \"))\n              (displayln \"Instructions: \" (recipe-cooking-instructions (cdr day-recipe)))\n              (displayln)) ; Adding a newline for clarity\n                     meal-plan))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))\n```","delimiter":"★"},"output":{"gptRetaggingJSON":{"1":"'(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\")","2":9,"3":9,"4":1},"out":"```racket\n(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define dietary-preferences ★'(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\")★)\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (filter-recipes-by-preferences recipes preferences)\n  (filter (lambda (recipe)\n            (let ((recipe-ingredients (recipe-ingredients recipe)))\n              (andmap (lambda (preference)\n                        (not (member preference recipe-ingredients)))\n                      preferences)))\n          recipes))\n\n(define (select-random-recipe filtered-recipes)\n  (list-ref filtered-recipes (random (length filtered-recipes))))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter-recipes-by-preferences available-recipes dietary-preferences)))\n      (select-random-recipe filtered-recipes)))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe))))\n              (displayln \"Ingredients: \" (string-join (recipe-ingredients (cdr day-recipe)) \", \"))\n              (displayln \"Instructions: \" (recipe-cooking-instructions (cdr day-recipe)))\n              (displayln)) ; Adding a newline for clarity\n                     meal-plan))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))\n```"},"target":"```racket\n(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define ★dietary-preferences★ '(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\"))\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (filter-recipes-by-preferences recipes preferences)\n  (filter (lambda (recipe)\n            (let ((recipe-ingredients (recipe-ingredients recipe)))\n              (andmap (lambda (preference)\n                        (not (member preference recipe-ingredients)))\n                      preferences)))\n          recipes))\n\n(define (select-random-recipe filtered-recipes)\n  (list-ref filtered-recipes (random (length filtered-recipes))))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter-recipes-by-preferences available-recipes dietary-preferences)))\n      (select-random-recipe filtered-recipes)))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe))))\n              (displayln \"Ingredients: \" (string-join (recipe-ingredients (cdr day-recipe)) \", \"))\n              (displayln \"Instructions: \" (recipe-cooking-instructions (cdr day-recipe)))\n              (displayln)) ; Adding a newline for clarity\n                     meal-plan))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))\n```","other":{"language":"Racket","snippetType":"constant","updateIsPartial":false,"delimiter":"★","codeWithSnippetDelimited":"(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define dietary-preferences ★'(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\")★)\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter (lambda (recipe)\n                                      (let ((recipe-ingredients (recipe-ingredients recipe)))\n                                        (andmap (lambda (preference)\n                                                  (not (member preference recipe-ingredients)))\n                                                dietary-preferences)))\n                                    available-recipes)))\n      (list-ref filtered-recipes (random (length filtered-recipes)))))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe)))\n                          (recipe-ingredients (cdr day-recipe))\n                          (recipe-cooking-instructions (cdr day-recipe)))\n                     meal-plan)))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))","updateDescription":"An interesting change or refactoring that a real-world programmer might apply to this code is to separate the meal planning logic from the recipe data and preferences. Currently, the `random-recipe` function includes both the filtering of recipes based on dietary preferences and the selection of a random recipe. This could make the code more complex and harder to maintain as the program grows.\n\nA possible refactoring could involve creating separate functions for filtering the recipes based on dietary preferences and selecting a random recipe from the filtered list. This would make the code more modular and reusable. Additionally, it would allow for easier modification or addition of new functions for filtering or selecting recipes based on different criteria in the future.\n\nAnother change that a real-world programmer might consider is using a data structure, such as a hash table or dictionary, to store the dietary preferences instead of a list. This would allow for faster lookup when filtering the recipes based on preferences and could improve the overall performance of the program.\n\nAdditionally, a real-world programmer might also consider adding error handling and input validation to the code. This could involve checking if the input preferences and recipe data are valid and handling any errors or edge cases gracefully. This would help ensure that the program behaves correctly and does not crash when given unexpected input.","updatedCodeWithSnippetDelimited":"```racket\n(define-record-type recipe\n  (make-recipe name ingredients cooking-instructions)\n  recipe?\n  (name recipe-name recipe-name?)\n  (ingredients recipe-ingredients recipe-ingredients?)\n  (cooking-instructions recipe-cooking-instructions recipe-cooking-instructions?))\n\n(define ★dietary-preferences★ '(\"vegetarian\" \"gluten-free\" \"pescatarian\" \"vegan\"))\n\n(define available-recipes\n  (list\n   (make-recipe \"Vegetable Stir Fry\"\n                '(\"mixed vegetables\" \"soy sauce\" \"sesame oil\")\n                \"1. Heat sesame oil in a pan. 2. Add mixed vegetables. 3. Stir-fry until cooked. 4. Add soy sauce and mix well.\")\n   (make-recipe \"Pasta with Tomato Sauce\"\n                '(\"pasta\" \"tomato sauce\" \"garlic\" \"onion\")\n                \"1. Cook pasta according to package instructions. 2. Heat oil in a pan. 3. Add garlic and onion, and sauté until golden. 4. Add tomato sauce and simmer for 10 minutes. 5. Serve over cooked pasta.\")\n   (make-recipe \"Grilled Salmon\"\n                '(\"salmon fillet\" \"olive oil\" \"lemon juice\" \"salt\" \"pepper\")\n                \"1. Preheat grill to medium-high heat. 2. Brush salmon fillet with olive oil. 3. Season with salt and pepper. 4. Grill for 5-6 minutes per side. 5. Drizzle with lemon juice before serving.\")))\n\n(define (filter-recipes-by-preferences recipes preferences)\n  (filter (lambda (recipe)\n            (let ((recipe-ingredients (recipe-ingredients recipe)))\n              (andmap (lambda (preference)\n                        (not (member preference recipe-ingredients)))\n                      preferences)))\n          recipes))\n\n(define (select-random-recipe filtered-recipes)\n  (list-ref filtered-recipes (random (length filtered-recipes))))\n\n(define (random-recipe dietary-preferences)\n    (let ((filtered-recipes (filter-recipes-by-preferences available-recipes dietary-preferences)))\n      (select-random-recipe filtered-recipes)))\n\n(define (generate-meal-plan)\n  (for/list ([day '(Monday Tuesday Wednesday Thursday Friday Saturday Sunday)])\n    (cons day (random-recipe dietary-preferences))))\n\n(define (print-meal-plan meal-plan)\n  (for-each (lambda (day-recipe)\n              (displayln (string-append (car day-recipe) \": \" (recipe-name (cdr day-recipe))))\n              (displayln \"Ingredients: \" (string-join (recipe-ingredients (cdr day-recipe)) \", \"))\n              (displayln \"Instructions: \" (recipe-cooking-instructions (cdr day-recipe)))\n              (displayln)) ; Adding a newline for clarity\n                     meal-plan))\n\n(let ((meal-plan (generate-meal-plan)))\n  (print-meal-plan meal-plan))\n```","problemDescription":"Problem: Generating a Weekly Meal Plan\n\nYou have been tasked with creating a program that generates a weekly meal plan for a family based on their dietary preferences. The program should take into account the family members' food restrictions and preferences, and suggest different meals for each day of the week.\n\nThe program should use the Racket programming language and be implemented in a single file.\n\nSteps to solve the problem:\n\n1. Define the dietary preferences: Start by defining the dietary preferences of the family members. This may include restrictions like vegetarian, vegan, gluten-free, or preferences like a preference for certain cuisines.\n\n2. Initialize the available recipes: Create a list of available recipes that are suitable for the family's dietary preferences. Each recipe should include information like the name, ingredients, and cooking instructions. Consider representing the recipes as a list of records, where each record holds the necessary information.\n\n3. Create a function for selecting a random recipe: Implement a function that takes the list of available recipes and the family's dietary preferences as input and selects a random recipe that satisfies the preferences. The function should use the `random` function from the Racket standard library to generate a random index within the range of the available recipes.\n\n4. Generate a weekly meal plan: Write a function that generates a meal plan for the entire week. The function should take into account the family's dietary preferences and generate a different recipe for each day of the week. To do this, you can use a loop or recursion to iterate over the days of the week and select a random recipe for each day using the function defined in step 3.\n\n5. Print the meal plan: Implement a function that takes the generated meal plan and prints it in a readable format. The function should display the recipe for each day of the week along with any additional information like the ingredients or cooking instructions.\n\n6. Test the program: Finally, test the program with different dietary preferences and verify that it generates a diverse and suitable meal plan for the family. Make sure to test different combinations of restrictions and preferences to ensure the program handles them correctly.\n\nBy following these steps, you can develop a Racket program that generates a weekly meal plan taking into account the family's dietary preferences and restrictions, providing them with diverse and suitable meal options for the entire week.","snippetDescription":"A particular constant in this program is the list \"dietary-preferences\". It is defined using the \"define\" syntax and consists of four strings: \"vegetarian\", \"gluten-free\", \"pescatarian\", and \"vegan\". This constant is used as a parameter in the \"random-recipe\" procedure to filter the available recipes based on dietary preferences.","index":88},"time":5960,"index":88}]